// <auto-generated />
using GetTheRide.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GetTheRide.DataAccess.Migrations
{
    [DbContext(typeof(GetTheRidePostgresDbContext))]
    [Migration("20220729115142_DisableEnumDescriptionTables")]
    partial class DisableEnumDescriptionTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GetTheRide.Domain.Passenger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("TripId")
                        .HasColumnType("integer")
                        .HasColumnName("trip_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_passenger");

                    b.HasIndex("TripId")
                        .HasDatabaseName("ix_passenger_trip_id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_passenger_user_id");

                    b.ToTable("passenger", (string)null);
                });

            modelBuilder.Entity("GetTheRide.Domain.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("integer")
                        .HasColumnName("available_seats");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_trips");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_trips_user_id");

                    b.ToTable("trips", (string)null);
                });

            modelBuilder.Entity("GetTheRide.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsInTrip")
                        .HasColumnType("boolean")
                        .HasColumnName("is_in_trip");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("last_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("GetTheRide.Domain.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("Seats")
                        .HasColumnType("integer")
                        .HasColumnName("seats");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_vehicles");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_vehicles_user_id");

                    b.ToTable("vehicles", (string)null);
                });

            modelBuilder.Entity("GetTheRide.Domain.Passenger", b =>
                {
                    b.HasOne("GetTheRide.Domain.Trip", "Trip")
                        .WithMany("Passengers")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_passenger_trips_trip_id");

                    b.HasOne("GetTheRide.Domain.User", "User")
                        .WithOne()
                        .HasForeignKey("GetTheRide.Domain.Passenger", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_passenger_users_user_id");

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GetTheRide.Domain.Trip", b =>
                {
                    b.HasOne("GetTheRide.Domain.User", "Driver")
                        .WithOne("Trip")
                        .HasForeignKey("GetTheRide.Domain.Trip", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_trips_users_user_id");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("GetTheRide.Domain.Vehicle", b =>
                {
                    b.HasOne("GetTheRide.Domain.User", "User")
                        .WithOne("Vehicle")
                        .HasForeignKey("GetTheRide.Domain.Vehicle", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicles_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GetTheRide.Domain.Trip", b =>
                {
                    b.Navigation("Passengers");
                });

            modelBuilder.Entity("GetTheRide.Domain.User", b =>
                {
                    b.Navigation("Trip");

                    b.Navigation("Vehicle");
                });
#pragma warning restore 612, 618
        }
    }
}
