// <auto-generated />
using GetTheRide.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GetTheRide.DataAccess.Migrations
{
    [DbContext(typeof(GetTheRidePostgresDbContext))]
    [Migration("20220729194325_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GetTheRide.Domain.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("integer")
                        .HasColumnName("available_seats");

                    b.Property<int>("DriverId")
                        .HasColumnType("integer")
                        .HasColumnName("driver_id");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("pk_trips");

                    b.ToTable("trips", (string)null);
                });

            modelBuilder.Entity("GetTheRide.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DriverTripId")
                        .HasColumnType("integer")
                        .HasColumnName("driver_trip_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<int>("PassengerTripId")
                        .HasColumnType("integer")
                        .HasColumnName("passenger_trip_id");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("DriverTripId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_driver_trip_id");

                    b.HasIndex("PassengerTripId")
                        .HasDatabaseName("ix_users_passenger_trip_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("GetTheRide.Domain.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DriverId")
                        .HasColumnType("integer")
                        .HasColumnName("driver_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Seats")
                        .HasColumnType("integer")
                        .HasColumnName("seats");

                    b.HasKey("Id")
                        .HasName("pk_vehicles");

                    b.HasIndex("DriverId")
                        .IsUnique()
                        .HasDatabaseName("ix_vehicles_driver_id");

                    b.ToTable("vehicles", (string)null);
                });

            modelBuilder.Entity("GetTheRide.Domain.User", b =>
                {
                    b.HasOne("GetTheRide.Domain.Trip", "DriverTrip")
                        .WithOne("Driver")
                        .HasForeignKey("GetTheRide.Domain.User", "DriverTripId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_users_trips_driver_trip_id1");

                    b.HasOne("GetTheRide.Domain.Trip", "PassengerTrip")
                        .WithMany("Passengers")
                        .HasForeignKey("PassengerTripId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_users_trips_trip_id");

                    b.Navigation("DriverTrip");

                    b.Navigation("PassengerTrip");
                });

            modelBuilder.Entity("GetTheRide.Domain.Vehicle", b =>
                {
                    b.HasOne("GetTheRide.Domain.User", "User")
                        .WithOne("Vehicle")
                        .HasForeignKey("GetTheRide.Domain.Vehicle", "DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicles_users_driver_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GetTheRide.Domain.Trip", b =>
                {
                    b.Navigation("Driver")
                        .IsRequired();

                    b.Navigation("Passengers");
                });

            modelBuilder.Entity("GetTheRide.Domain.User", b =>
                {
                    b.Navigation("Vehicle");
                });
#pragma warning restore 612, 618
        }
    }
}
